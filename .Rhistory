# postscriptOpNameList <- c("^2", "^3")
k <- 2
funcNameList <- c("log", "sin")
postscriptOpNameList <- c("^2")
maxItemCount <- 3
doGenerateCombo <- TRUE
chunkSize <- 10
workDir <- "C:/temp/cpsc375proj1/work/"
filename <- "comboList"
ext <- ".csv"
cols = colnames(data)
iVars <- getIndependentVars(cols, dependentAttrib, excludes)
allIVars <-iVars
allIVars <- buildInFuncs(allIVars, iVars, funcNameList)
allIVars <- buildInPostscriptOps(allIVars, iVars, postscriptOpNameList)
if (doGenerateCombo) {
unlink(paste(workDir, "*.*", sep = ""), recursive = FALSE)
pclInfo <- initializeProcessComboListInfo(chunkSize, workDir, filename, ext)
comboNChooseKAllv3(as.list(allIVars), k, processComboListFunc, pclInfo)
}
# comboList <- comboNChooseKAll(as.list(allIVars), k)
fileList <- list.files(workDir)
currentBestFits <- list()
for (filename in fileList) {
filePath <- paste(workDir, filename, sep = "")
comboList <- readListFromFile(filePath)
exploreList <- list()
exploreList <- compileExploreListWithComboList(data, exploreList, comboList, dependentAttrib)
bestFitList <- calculateBestfit(exploreList, maxItemCount)
currentBestFits <- mergeBestFits(currentBestFits, bestFitList, maxItemCount)
comboList <- list()
exploreList <- list()
}
eqnList <- generateBestFitEquations(currentBestFits)
for (i in 1:length(currentBestFits)) {
print(eqnList[i])
print(currentBestFits[[i]][[3]]["adj.r.squared"])
}
debugSource('C:/temp/cpsc375proj1/proj1.R')
force(maxItemCount)
force(currentBestFits)
force(bestFits)
for (bestFit in bestFits) {
currentBestFits[[length(currentBestFits)+1]] <- bestFit
}
debugSource('C:/temp/cpsc375proj1/proj1.R')
force(bestFits)
force(currentBestFits)
force(maxItemCount)
force(bestFits)
force(currentBestFits)
force(maxItemCount)
currentBestFits[[1]]
currentBestFits[[2]]
bestFits[[1]]
length(bestFits)
bestFits[[1]]
bestFits[[2]]
bestFits[[2]]
bestFits[[3]]
debugSource('C:/temp/cpsc375proj1/proj1.R')
bestFitList[[1]]
bestFitList[[2]]
length(bestFitList)
View(currentBestFits)
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("class")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(class)
# TODO: to be filled
bodyfatpercentage <- function(Age, Weight, Height, Neck, Chest, Abdomen, Hip, Thigh, Knee, Ankle, Biceps, Forearm, Wrist) {
# your code goes here
}
# Combo Generation
comboNChooseKRecursive <- function(inputList, n, k, buildList, buildIndex, start, end, comboList) {
if (buildIndex > k) {
cLength <- length(comboList) + 1
comboList[[cLength]] <- buildList
# print(paste("add to comboList", paste(buildList, collapse=","), sep = " "))
}
else {
i <- start
while ((i <= end) &&  (n-i+1 >= k-buildIndex+1)) {
buildList[buildIndex] <- inputList[i]
newIndex <- i + 1
newBuildIndex <- buildIndex + 1
# print(paste("recurse buildIndex:", buildIndex, "i:", i, "end:", end, "newBuildIndex:", newBuildIndex, "newIndex:", newIndex, "b:", paste(buildList, collapse=","), sep= " "))
comboList <- comboNChooseKRecursive(inputList, n, k, buildList, newBuildIndex, newIndex, end, comboList)
# print(paste("return from recurse comboList buildIndex:", buildIndex, "i:", i, "end:", end, "newBuildIndex:", newBuildIndex, "newIndex:", newIndex, sep= " "))
i <- i + 1
}
# while ((i <= end) &&  (n-i+1 >= k-buildIndex+1)) {
}
# if (buildIndex > k) {
return (comboList)
}
comboNChooseK <- function(inputList, k) {
n <- length(inputList)
buildList <- vector(length = k)
buildIndex1 <- 1
start <- 1
end <- n
comboList <- list()
comboList <- comboNChooseKRecursive(inputList, n, k, buildList, buildIndex1, start, end, comboList)
return (comboList)
}
comboNChooseKAll <- function(inputList, k) {
comboListAll <- list()
iLength <- length(inputList)
if (k <= 0) {
k = iLength
}
i <- 1
while (i<=k) {
comboList <- comboNChooseK(inputList, i)
comboListAll <- do.call(c, list(comboListAll, comboList))
i <- i + 1
}
return (comboListAll)
}
# Function Generation
genFuncCall <- function(inputList, funcCall) {
return (lapply(1:3, function(i) paste(funcCall, "(", i, ")", sep = '', collapse = ' ')))
}
genPostscriptOpCall <- function(inputList, postscriptOp) {
return (lapply(1:3, function(i) paste(i, postscriptOp, sep = '', collapse = ' ')))
}
# Plotting
ggplotFunc <- function(aesFunc, labelX, labelY, title) {
ggplot(data, aesFunc()) + geom_point() + labs(x = labelX, y = labelY, title = title) + geom_smooth(method = 'lm', se = FALSE)
}
# Execute linear modeling
# bfFormula <- bodyfat~Hip+Thigh
# lmData <- lm(data = data, formula = bfFormula)
# sum <- summary(lmData)
# sum$r.squared
# sum$adj.r.squared
buildExploreList <- function(data, exploreList, bfFormula) {
lmData <- lm(data = data, formula = bfFormula)
sum <- summary(lmData)
nextIndex <- length(exploreList) + 1
exploreList[[nextIndex]] <- list(bfFormula, lmData, sum)
return (exploreList)
}
# Formulation
# iVars <- getIndependentVars(cols, dependentAttrib, excludes)
getIndependentVars <- function(cols, dependentAttrib, excludes) {
iVector <- cols[!cols == dependentAttrib]
for (ex in excludes) {
iVector <- iVector[!iVector == ex]
}
return (iVector)
}
# bf <- getBfFormula('bodyfat', c('Thigh', 'knee'))
getBfFormula <- function(dependentAttrib, independentVars) {
iVars <- paste(independentVars, collapse = "+")
return (as.formula(paste(dependentAttrib, "~", iVars)))
}
genFuncCall <- function(inputList, funcCall) {
return (lapply(inputList, function(i) paste(funcCall, "(", i, ")", sep = '', collapse = ' ')))
}
genPostscriptOpCall <- function(inputList, postscriptOp) {
return (lapply(inputList, function(i) paste(i, postscriptOp, sep = '', collapse = ' ')))
}
buildInFuncs <- function(allIVars, iVars, funcNameList){
for (funcName in funcNameList) {
funcList <- genFuncCall(as.list(iVars), funcName)
for (func in funcList) {
allIVars[[length(allIVars)+1]] <- func
}
}
return (allIVars)
}
buildInPostscriptOps <- function(allIVars, iVars, postscriptOpNameList){
for (postscriptOpName in postscriptOpNameList) {
postscriptList <- genPostscriptOpCall(as.list(iVars), postscriptOpName)
for (postscript in postscriptList) {
allIVars[[length(allIVars)+1]] <- postscript
}
}
return (allIVars)
}
compileExploreListWithComboList <- function(data, exploreList, comboList, dependentAttrib) {
for (combo in comboList) {
bf <- getBfFormula(dependentAttrib, combo)
exploreList <- buildExploreList(data, exploreList, bf)
}
return (exploreList)
}
calculateBestfit <- function(exploreList, maxItemsCount) {
maxValueList <-vector(mode="numeric", length=maxItemsCount)
maxItemList <- list()
maxItemList[[1]] <- exploreList[[1]]
maxValueList[1] <- exploreList[[1]][[3]]["adj.r.squared"]
for (i in 2:maxItemCount) {
maxItemList[[length(maxItemList)+1]] <- exploreList[[1]]
maxValueList[i] <- exploreList[[1]][[3]]["adj.r.squared"]
}
if (length(exploreList) != maxItemsCount) {
for(ex in exploreList) {
rsquared = as.numeric(ex[[3]]["r.squared"])
rsquaredadj = as.numeric(ex[[3]]["adj.r.squared"])
# print(i[[3]]["adj.r.squared"])
for (index in 1:length(maxValueList))
{
if (rsquaredadj > maxValueList[index]) {
form <- paste(ex[[1]], collapse = " ")
print(paste("max", form, rsquaredadj))
maxValueList[index] <- rsquaredadj
maxItemList[[index]] <- ex
break
}
}
}
# for(ex in exploreList) {
}
return (maxItemList)
}
mergeBestFits <- function(currentBestFits, bestFits, maxItemCount) {
for (bestFit in bestFits) {
currentBestFits[[length(currentBestFits)+1]] <- bestFit
}
currentBestFits <- calculateBestfit(currentBestFits, maxItemCount)
return (currentBestFits)
}
parseFormulaRecursive <- function (ideList, indepLanguage) {
separator <- '+'
for (i in 1:length(indepLanguage)) {
token <- indepLanguage[[i]]
type <- typeof(token)
if (type == 'symbol') {
if (token != separator) {
ideList[[length(ideList)+1]] <- token
}
}
else {
if (!grepl(separator, toString(token), fixed = TRUE)) {
ideList[[length(ideList)+1]] <- token
}
else {
ideList <- parseFormulaRecursive(ideList, token)
}
}
}
return (ideList)
}
parseFormula <- function(indepLanguage) {
ideList <- list()
ideList <- parseFormulaRecursive(ideList, indepLanguage)
return (ideList)
}
getEquation <- function(item) {
bfFormula <- item[[1]]
# '~'
# bfFormula[[1]]
# 'bodyfat'
dependent <- bfFormula[[2]]
# log(sin(a))+b+c
indep <- bfFormula[[3]]
iList <- parseFormula(indep)
# print(iList)
bfSummary <- item[[2]]
coff <- bfSummary$coefficients
intercept <- coff["(Intercept)"]
coffValueList <- coff[2:length(coff)]
# print(coffValueList)
n <- names(coffValueList)
coffEqnList <- vector(length=length(coffValueList))
for (i in 1:length(coffValueList)) {
coffEqnList[i] <- paste(coffValueList[i], "*", n[i])
}
coffEqn = paste(coffEqnList, collapse = "+")
equation <- paste(dependent, "=", intercept, "+", coffEqn)
return (equation)
}
generateBestFitEquations <- function(bestFitList) {
eqnList <- vector(mode="character", length = length(bestFitList))
for (i in 1:length(bestFitList)) {
eqn <- getEquation(bestFitList[[i]])
eqnList[i] <- eqn
}
return (eqnList)
}
writeListToFile <- function(listObj, workDir, filename, fileIndex, ext) {
listObjVector <- c()
for (i in 1:length(listObj)) {
listObjVector[i] <- paste(listObj[[i]], collapse = ",")
}
filePath <- paste(workDir, filename, ".", fileIndex, ext, sep = "")
writeLines(listObjVector, filePath)
}
readListFromFile <- function(filePath) {
listObj <- list()
con <- file(filePath, "r")
listObjVector <- readLines(con)
close(con)
for (i in 1:length(listObjVector)) {
listObj[[length(listObj)+1]] <- unlist(strsplit(listObjVector[i], split=","))
}
return (listObj)
}
comboNChooseKAllv2 <- function(inputList, k, chunkSize, workDir, filename, ext) {
comboListAll <- list()
iLength <- length(inputList)
if (k <= 0) {
k = iLength
}
fileIndex <- 0
i <- 1
while (i<=k) {
comboList <- comboNChooseK(inputList, i)
comboListAll <- do.call(c, list(comboListAll, comboList))
comboList <- list()
if (length(comboListAll) >= chunkSize) {
writeListToFile(comboListAll, workDir, filename, fileIndex, ext)
comboListAll <- list()
fileIndex <- fileIndex + 1
}
i <- i + 1
}
if (length(comboListAll) > 0) {
writeListToFile(comboListAll, workDir, filename, fileIndex, ext)
comboListAll <- list()
fileIndex <- fileIndex + 1
}
}
# pclInfo<- list(workDir, filename, 0, ext)
# names(pclInfo) <- c("workDir", "filename", "fileIndex", "ext")
# workDir <- pclInfo[["workDir"]]
# processComboListFunc(inputList, n, k, buildList, buildIndex, start, end, comboList)
initializeProcessComboListInfo <- function(chunkSize, workDir, filename, ext) {
pclInfo<- list(chunkSize, workDir, filename, 0, ext)
names(pclInfo) <- c("chunksize", "workdir", "filename", "fileindex", "ext")
return (pclInfo)
}
processComboListFunc <- function(inputList, n, k, buildList, buildIndex, start, end, comboList, pclInfo, isTailData = FALSE) {
chunkSize <- pclInfo[["chunksize"]]
workDir <- pclInfo[["workdir"]]
filename <- pclInfo[["filename"]]
fileIndex <- pclInfo[["fileindex"]]
ext <- pclInfo[["ext"]]
if (isTailData || (length(comboList) >= chunkSize)) {
writeListToFile(comboList, workDir, filename, fileIndex, ext)
comboList <- list()
pclInfo[["fileindex"]] <- fileIndex + 1
}
retVal <- list(comboList, pclInfo)
names(retVal) <- c("combolist", "pclinfo")
return (retVal)
}
comboNChooseKRecursiveV3 <- function(inputList, n, k, buildList, buildIndex, start, end, comboList, processComboListFunc, pclInfo) {
if (buildIndex > k) {
cLength <- length(comboList) + 1
comboList[[cLength]] <- buildList
# print(paste("add to comboList", paste(buildList, collapse=","), sep = " "))
retVal <- processComboListFunc(inputList, n, k, buildList, buildIndex, start, end, comboList, pclInfo)
comboList <- retVal[["combolist"]]
pclInfo <- retVal[["pclinfo"]]
}
else {
i <- start
while ((i <= end) &&  (n-i+1 >= k-buildIndex+1)) {
buildList[buildIndex] <- inputList[i]
newIndex <- i + 1
newBuildIndex <- buildIndex + 1
# print(paste("recurse buildIndex:", buildIndex, "i:", i, "end:", end, "newBuildIndex:", newBuildIndex, "newIndex:", newIndex, "b:", paste(buildList, collapse=","), sep= " "))
retVal <- comboNChooseKRecursiveV3(inputList, n, k, buildList, newBuildIndex, newIndex, end, comboList, processComboListFunc, pclInfo)
comboList <- retVal[["combolist"]]
pclInfo <- retVal[["pclinfo"]]
# print(paste("return from recurse comboList buildIndex:", buildIndex, "i:", i, "end:", end, "newBuildIndex:", newBuildIndex, "newIndex:", newIndex, sep= " "))
i <- i + 1
}
# while ((i <= end) &&  (n-i+1 >= k-buildIndex+1)) {
}
# if (buildIndex > k) {
retVal <- list(comboList, pclInfo)
names(retVal) <- c("combolist", "pclinfo")
return (retVal)
}
comboNChooseKv3 <- function(inputList, k, processComboListFunc, pclInfo) {
n <- length(inputList)
buildList <- vector(length = k)
buildIndex <- 1
start <- 1
end <- n
comboList <- list()
retVal <- comboNChooseKRecursiveV3(inputList, n, k, buildList, buildIndex, start, end, comboList, processComboListFunc, pclInfo)
comboList <- retVal[["combolist"]]
pclInfo <- retVal[["pclinfo"]]
retVal <- processComboListFunc(inputList, n, k, buildList, buildIndex, start, end, comboList, pclInfo, TRUE)
return (retVal)
}
comboNChooseKAllv3 <- function(inputList, k, processComboListFunc, pclInfo) {
comboListAll <- list()
fileIndex <- 0
if (k <= 0) {
k <- length(inputList)
}
i <- 1
while (i<=k) {
retVal <- comboNChooseKv3(inputList, i, processComboListFunc, pclInfo)
comboList <- retVal[["combolist"]]
pclInfo <- retVal[["pclinfo"]]
comboListAll <- do.call(c, list(comboListAll, comboList))
comboList <- list()
i <- i + 1
}
}
# Execution
data <- read.csv("http://staff.pubhealth.ku.dk/~tag/Teaching/share/data/Bodyfat.csv")
# data <- read.csv("C:/temp/cpsc375proj1/Bodyfat.csv")
data <- na.omit(data)
# Plotting
labelY <- "Abdomen Size"
aesFunc <- function() aes(x=bodyfat, y=Abdomen)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Weight"
aesFunc <- function() aes(x=bodyfat, y=Weight)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Hip"
aesFunc <- function() aes(x=bodyfat, y=Hip)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Chest"
aesFunc <- function() aes(x=bodyfat, y=Chest)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Thigh"
aesFunc <- function() aes(x=bodyfat, y=Thigh)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Age"
aesFunc <- function() aes(x=bodyfat, y=Age)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
labelY <- "Density"
aesFunc <- function() aes(x=bodyfat, y=Density)
labelX <- "Body Fat"
title <- paste("Scatterplot of ", labelY, " on ", labelX)
ggplotFunc(aesFunc = aesFunc, labelX, labelY, title)
dependentAttrib = "bodyfat"
excludes = c("Density")
# k <- 3
# funcNameList <- c("log", "exp", "sqrt", "log10", "floor", "ceiling", "sin", "cos", "tan")
# postscriptOpNameList <- c("^2", "^3")
k <- 2
funcNameList <- c("log", "sin")
postscriptOpNameList <- c("^2")
maxItemCount <- 3
doGenerateCombo <- TRUE
chunkSize <- 10
workDir <- "C:/temp/cpsc375proj1/work/"
filename <- "comboList"
ext <- ".csv"
cols = colnames(data)
iVars <- getIndependentVars(cols, dependentAttrib, excludes)
allIVars <-iVars
allIVars <- buildInFuncs(allIVars, iVars, funcNameList)
allIVars <- buildInPostscriptOps(allIVars, iVars, postscriptOpNameList)
if (doGenerateCombo) {
unlink(paste(workDir, "*.*", sep = ""), recursive = FALSE)
pclInfo <- initializeProcessComboListInfo(chunkSize, workDir, filename, ext)
comboNChooseKAllv3(as.list(allIVars), k, processComboListFunc, pclInfo)
}
# comboList <- comboNChooseKAll(as.list(allIVars), k)
fileList <- list.files(workDir)
currentBestFits <- list()
for (filename in fileList) {
filePath <- paste(workDir, filename, sep = "")
comboList <- readListFromFile(filePath)
exploreList <- list()
exploreList <- compileExploreListWithComboList(data, exploreList, comboList, dependentAttrib)
bestFitList <- calculateBestfit(exploreList, maxItemCount)
currentBestFits <- mergeBestFits(currentBestFits, bestFitList, maxItemCount)
comboList <- list()
exploreList <- list()
}
eqnList <- generateBestFitEquations(currentBestFits)
for (i in 1:length(currentBestFits)) {
print(eqnList[i])
print(currentBestFits[[i]][[3]]["adj.r.squared"])
}
debugSource('C:/temp/cpsc375proj1/proj1.R')
View(currentBestFits)
install.packages("sparklyr")
library(sparklyr)
spark_install()
library(tidyverse)
library(sparklyr)
mylocaldata <- read_csv("Bodyfat.csv")
sc <- spark_connect(master = "local")
myremotedata <- copy_to(sc, mylocaldata)
mymodel <- ml_linear_regression(x=myremotedata , formula = bodyfat ~ Weight + Height)
summary(mymodel)
spark_web(sc)
setwd("c:/temp/cpsc375proj2/")
mylocaldata <- read_csv("Bodyfat.csv")
sc <- spark_connect(master = "local")
myremotedata <- copy_to(sc, mylocaldata)
mylocaldata <- read_csv("Bodyfat.csv")
sc <- spark_connect(master = "local")
